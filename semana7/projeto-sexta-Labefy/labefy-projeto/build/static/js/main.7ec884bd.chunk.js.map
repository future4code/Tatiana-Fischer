{"version":3,"sources":["components/MyPlaylists.js","App.js","serviceWorker.js","index.js"],"names":["DeleteButton","styled","span","MyPlaylists","state","currentPage","playlists","typedPlaylist","tracks","typedTrackName","typedTrackArtist","typedTrackUrl","onChangeInputValue","event","setState","target","value","console","log","createPlaylist","body","name","axios","post","headers","Authorization","then","response","alert","listedPlaylists","catch","error","componentDidMount","get","data","result","list","deletePlaylist","playlistId","delete","changePage","onClickTracks","onChangeInputTrackName","onChangeInputTrackArtist","onChangeInputTrackUrl","createTrack","artist","url","this","onChange","onClick","map","playlist","id","key","track","title","src","width","height","frameBorder","allowTransparency","allow","type","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7ec884bd.chunk.js","sourcesContent":["import React from \"react\";\r\n// import PlaylistDetails from \"./PlaylistDetails\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DeleteButton = styled.span`\r\n  color: red;\r\n  cursor: pointer;\r\n`;\r\nconst PlayButton = styled.span`\r\n  color: white;\r\n  cursor: pointer;\r\n  background-color: rgb(150, 255, 0, 0.9);\r\n  padding: 5px 8px;\r\n  border-radius: 20px;\r\n  margin: 8px;\r\n\r\n  font-size: 12px;\r\n`;\r\nexport default class MyPlaylists extends React.Component {\r\n  state = {\r\n    currentPage: \"myPlaylists\",\r\n    playlists: [],\r\n    typedPlaylist: \"\",\r\n    tracks: [],\r\n    typedTrackName: \"\",\r\n    typedTrackArtist: \"\",\r\n    typedTrackUrl: \"\",\r\n  };\r\n\r\n  //pegar o que for digitado no input (testar com console.log)-----------------------------------------\r\n  onChangeInputValue = (event) => {\r\n    this.setState({ typedPlaylist: event.target.value });\r\n    console.log(this.typedPlaylist);\r\n  };\r\n\r\n  //usar axios para possibilitar criar e salvar uma playlist (testar no postman)-------------------------------\r\n  createPlaylist = () => {\r\n    const body = {\r\n      name: this.state.typedPlaylist,\r\n    };\r\n    axios\r\n      .post(\r\n        \"https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists\",\r\n        body,\r\n        {\r\n          headers: {\r\n            Authorization: \"tatiana-fischer-mello\",\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (this.state.typedPlaylist != this.state.playlists) {\r\n          alert(`Playlist ${this.state.typedPlaylist} criada com sucesso!`);\r\n          this.setState({ typedPlaylist: \"\" });\r\n          this.listedPlaylists(); //aparecer na lista na hora que clicar save}\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(\"Playlist já existente!\");\r\n      });\r\n  };\r\n\r\n  //pegar as playlist existentes e listar--------------------------------------------\r\n\r\n  componentDidMount = () => {\r\n    this.listedPlaylists(); //atualiza a lista\r\n  };\r\n\r\n  listedPlaylists = () => {\r\n    axios\r\n      .get(\r\n        \"https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists\",\r\n        {\r\n          headers: {\r\n            Authorization: \"tatiana-fischer-mello\",\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        this.setState({ playlists: response.data.result.list });\r\n      });\r\n  };\r\n\r\n  //OPÇÃO DE DELETAR PLAYLIST--------------------------------------------------------\r\n  deletePlaylist = (playlistId) => {\r\n    axios\r\n      .delete(\r\n        `https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists/${playlistId}`,\r\n        {\r\n          headers: {\r\n            Authorization: \"tatiana-fischer-mello\",\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        alert(\"Playlist apagada com sucesso!\");\r\n        this.listedPlaylists(); //para atualizar na hora a lista sem o item deletado\r\n      })\r\n      .catch((error) => {\r\n        alert(\"ERRO AO APAGAR playlist\");\r\n      });\r\n  };\r\n\r\n  //AO CLICAR NA PLAYLIST, APARECER DETALHES DA PLAYLIST (MUSICAS E ARTISTA)-------------------------\r\n  changePage = () => {\r\n    if (this.state.currentPage === \"myPlaylists\") {\r\n      this.setState({ currentPage: \"playlistDetails\" });\r\n    } else {\r\n      this.setState({ currentPage: \"myPlaylists\" });\r\n    }\r\n  };\r\n\r\n  //pegar todas as músicas com axios ---------------------------------------------------\r\n\r\n  onClickTracks = (playlistId) => {\r\n    axios\r\n      .get(\r\n        `https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists/${playlistId}/tracks`,\r\n        {\r\n          headers: {\r\n            Authorization: \"tatiana-fischer-mello\",\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        this.setState({ tracks: response.data.result.tracks });\r\n        console.log(response.data.result.tracks);\r\n      });\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //pegar todas as músicas com axios ---------------------------------------------------\r\n  //pegar o que for digitado no input (testar com console.log)-----------------------------------------\r\n  onChangeInputTrackName = (event) => {\r\n    this.setState({ typedTrackName: event.target.value });\r\n  };\r\n  onChangeInputTrackArtist = (event) => {\r\n    this.setState({ typedTrackArtist: event.target.value });\r\n  };\r\n  onChangeInputTrackUrl = (event) => {\r\n    this.setState({ typedTrackUrl: event.target.value });\r\n  };\r\n  //usar axios para possibilitar criar e salvar uma playlist (testar no postman)-------------------------------\r\n  createTrack = (playlistId) => {\r\n    const body = {\r\n      name: this.state.typedTrackName,\r\n      artist: this.state.typedTrackArtist,\r\n      url: this.state.typedTrackUrl,\r\n    };\r\n    axios\r\n      .post(\r\n        `https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists/${playlistId}/tracks`,\r\n        body,\r\n        {\r\n          headers: {\r\n            Authorization: \"tatiana-fischer-mello\",\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n\r\n        alert(`Música ${this.state.typedTrackName} criada com sucesso!`);\r\n        this.setState({ typedTrackName: \"\" });\r\n        this.setState({ typedTrackArtist: \"\" });\r\n        this.setState({ typedTrackUrl: \"\" });\r\n        // this.listedT(); //aparecer na lista na hora que clicar save}\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(\"Erro!\");\r\n      });\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* ------------------CRIAR PLAYLIST------------------------------------ */}\r\n        <section>\r\n          <h2>Create Playlist:</h2>\r\n          <label>Name:</label>\r\n          <input\r\n            value={this.state.typedPlaylist}\r\n            onChange={this.onChangeInputValue}\r\n          />\r\n          <button onClick={this.createPlaylist}>Create</button>\r\n        </section>\r\n        {/* ------------------LISTA DE PLAYLISTS COM BOTÃO DE DELETAR------------------------------------ */}\r\n        <section>\r\n          <hr />\r\n          <h3>My Playlists:</h3>\r\n\r\n          {this.state.playlists.map((playlist) => {\r\n            return (\r\n              <ol>\r\n                <li\r\n                  onClick={() => this.onClickTracks(playlist.id)}\r\n                  key={playlist.id}\r\n                >\r\n                  <strong>{playlist.name}</strong> - {\"\"}\r\n                  <DeleteButton onClick={() => this.deletePlaylist()}>\r\n                    ×\r\n                  </DeleteButton>\r\n                </li>\r\n              </ol>\r\n            );\r\n          })}\r\n        </section>\r\n        {/* ------------------LISTA DE MUSICAS COM O ATALHO DO SPOTIFY------------------------------------ */}\r\n        <hr />\r\n        <section>\r\n          <h5>Musicas da playlist selecionada:</h5>\r\n\r\n          {this.state.tracks.map((track) => {\r\n            return (\r\n              <div>\r\n                <ol>\r\n                  {\" \"}\r\n                  <li key={track.id}>{track.name}</li>{\" \"}\r\n                </ol>\r\n                <iframe\r\n                  title={track.name}\r\n                  src={track.url}\r\n                  width=\"300\"\r\n                  height=\"80\"\r\n                  frameBorder=\"0\"\r\n                  allowTransparency=\"true\"\r\n                  allow=\"encrypted-media\"\r\n                />\r\n                {/* ------------------ADICIONAR NOVA MUSICA------------------------------------ */}\r\n\r\n                <form>\r\n                  <legend>Add New Music:</legend>\r\n                  <legend>Name:</legend>\r\n                  <input\r\n                    value={this.state.typedTrackName}\r\n                    onChange={this.onChangeInputTrackName}\r\n                  ></input>\r\n                  <legend>Artist:</legend>\r\n                  <input\r\n                    value={this.state.typedTrackArtist}\r\n                    onChange={this.onChangeInputTrackArtist}\r\n                  ></input>\r\n                  <legend>URL:</legend>\r\n                  <input\r\n                    type=\"url\"\r\n                    value={this.state.typedTrackUrl}\r\n                    onChange={this.onChangeInputTrackUrl}\r\n                  ></input>\r\n                  <button onClick={this.createTrack}>Save</button>\r\n                </form>\r\n              </div>\r\n            );\r\n          })}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport MyPlaylists from \"./components/MyPlaylists\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <MyPlaylists />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}