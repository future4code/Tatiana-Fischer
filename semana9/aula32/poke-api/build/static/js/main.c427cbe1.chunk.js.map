{"version":3,"sources":["components/PokeCard.js","App.js","serviceWorker.js","index.js"],"names":["PokeCard","props","useState","pokemon","setPokemon","useEffect","pegaPokemon","pokeName","axios","get","then","response","data","catch","err","console","log","name","weight","types","type","sprites","src","front_default","alt","App","pokeList","setPokeList","setPokeName","results","className","onChange","event","target","value","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4QA6DeA,EAzDE,SAACC,GAAW,IAAD,EACIC,mBAAS,IADb,mBACnBC,EADmB,KACVC,EADU,KAO1BC,qBAAU,WACRC,EAAYL,EAAME,WACjB,CAACF,EAAME,UAsBV,IAAMG,EAAc,SAACC,GACnBC,IACGC,IADH,4CAC4CF,IACzCG,MAAK,SAACC,GAELP,EAAWO,EAASC,SAErBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAMlB,OACE,6BACE,2BAAIX,EAAQc,MACZ,2BAAId,EAAQe,OAAZ,OACCf,EAAQgB,OAAS,2BAAIhB,EAAQgB,MAAM,GAAGC,KAAKH,MAC3Cd,EAAQkB,SACP,yBAAKC,IAAKnB,EAAQkB,QAAQE,cAAeC,IAAKrB,EAAQc,SCjD/C,SAASQ,IAAO,IAAD,EACIvB,mBAAS,IADb,mBACrBwB,EADqB,KACXC,EADW,OAGIzB,mBAAS,IAHb,mBAGrBK,EAHqB,KAGXqB,EAHW,KAa5BvB,qBAAU,WACRG,IACGC,IAAI,gDACJC,MAAK,SAACC,GAELgB,EAAYhB,EAASC,KAAKiB,YAE3BhB,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEf,IAYH,OACE,yBAAKgB,UAAU,OAGb,4BAAQC,SARW,SAACC,GACtBJ,EAAYI,EAAMC,OAAOC,SAQrB,4BAAQA,MAAO,IAAf,UAECR,EAASS,KAAI,SAAChC,GACb,OACE,4BAAQiC,IAAKjC,EAAQc,KAAMiB,MAAO/B,EAAQc,MACvCd,EAAQc,UAOhBV,GAAY,kBAAC,EAAD,CAAUJ,QAASI,KC9ClB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACnB,EAAD,OAEFoB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.c427cbe1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst PokeCard = (props) => {\r\n  const [pokemon, setPokemon] = useState({});\r\n  // state = {\r\n  //   // valor do estado que guarda infos e foto do pokemon\r\n  //   pokemon: {},\r\n  // };\r\n\r\n  useEffect(() => {\r\n    pegaPokemon(props.pokemon);\r\n  }, [props.pokemon]);\r\n  // método que roda após a montagem do componente\r\n  // componentDidMount() {\r\n\r\n  // }\r\n\r\n  // método que roda após a atualização do componente.\r\n  // Um dos casos de atualização do componente é a\r\n  // mudança da props que está sendo passado pra ele\r\n  // componentDidUpdate(prevProps) {\r\n  //   aqui, é feita uma verificação da props anterior com a props atual.\r\n  //   Caso a props anterior seja diferente da props atual,\r\n  //   a função pegaPokemon é chamada.\r\n  //   if (prevProps.pokemon !== props.pokemon) {\r\n  //     pegaPokemon(props.pokemon);\r\n  //   }\r\n  // }\r\n\r\n  // função que bate na poke API com um nome específico de pokemon\r\n  // Isso permite que consigamos pegar as infos dos pokemons.\r\n  // Nos métodos de ciclo de vida, ela é chamada passando como\r\n  // parâmetro o nome de pokemon que está chegando como props.\r\n  const pegaPokemon = (pokeName) => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\r\n      .then((response) => {\r\n        // guarda as infos do pokemon no estado\r\n        setPokemon(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  // const pokemon = pokemon;\r\n\r\n  return (\r\n    <div>\r\n      <p>{pokemon.name}</p>\r\n      <p>{pokemon.weight} Kg</p>\r\n      {pokemon.types && <p>{pokemon.types[0].type.name}</p>}\r\n      {pokemon.sprites && (\r\n        <img src={pokemon.sprites.front_default} alt={pokemon.name} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeCard;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./styles/styles.css\";\nimport axios from \"axios\";\nimport PokeCard from \"./components/PokeCard\";\n\nexport default function App() {\n  const [pokeList, setPokeList] = useState([]);\n\n  const [pokeName, setPokeName] = useState(\"\");\n\n  // state = {\n  //   // lista de pokemons que está sendo guardada no estado\n  //   pokeList: [],\n  //   // nome do pokemon guardado no estado, assim que o usuário\n  //   // escolhe um nome no dropdown\n  //   pokeName: \"\",\n  // };\n\n  useEffect(() => {\n    axios\n      .get(\"https://pokeapi.co/api/v2/pokemon/?limit=151\")\n      .then((response) => {\n        // função que está setando no estado os 151 pokemons\n        setPokeList(response.data.results);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n  // método que roda após a montagem do componente\n\n  // componentDidMount = () => {\n  //   // função axios que está batendo na API e buscando 151 pokemons\n\n  // };\n\n  const changePokeName = (event) => {\n    setPokeName(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      {/* evento onChange chama função toda vez que o usuário \n        escolhe um novo pokemon no dropdown */}\n      <select onChange={changePokeName}>\n        <option value={\"\"}>Nenhum</option>\n        {/* renderizando a lista de pokemons como opções do select */}\n        {pokeList.map((pokemon) => {\n          return (\n            <option key={pokemon.name} value={pokemon.name}>\n              {pokemon.name}\n            </option>\n          );\n        })}\n      </select>\n      {/* expressão booleana que renderiza o componente PokeCard,\n        caso o valor de pokeName, no estado, seja true */}\n      {pokeName && <PokeCard pokemon={pokeName} />}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}